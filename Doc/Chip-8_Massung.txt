Each instruction is 16-bit and written MSB first. Each instruction is 
broken down into nibbles, where the nibbles (when combined) mean the 
following:

Operand  Description
X 	     Virtual register (V0-VF)
Y        Virtual register (V0-VF)
N        4-bit nibble literal
NN       8-bit byte literal
NNN      12-bit literal address (typically a label)

Here is the CHIP-8 instructions. The Super CHIP-8 instructions follow 
after the basic instruction set.

Op    Mnemonic 	   Description
==============================
00E0  CLS           Clear video memory
00EE  RET           Return from subroutine
0NNN  SYS NNN       Call CDP1802 subroutine at NNN
1NNN  CALL NNN      Call CHIP-8 subroutine at NNN
2NNN  JP NNN        Jump to address NNN
BNNN  JP V0, NNN    Jump to address NNN + V0
3XNN  SE VX, NN     Skip next instruction if VX == NN
4XNN  SNE VX, NN    Skip next instruction if VX != NN
5XY0  SE VX, VY     Skip next instruction if VX == VY
9XY0  SNE VX, VY    Skip next instruction if VX != VY
EX9E  SKP VX        Skip next instruction if key(VX) is pressed
EXA1  SKNP VX       Skip next instruction if key(VX) is not pressed
FX0A  LD VX, K      Wait for key press, store key pressed in VX
6XNN  LD VX, NN     VX = NN
8XY0  LD VX, VY     VX = VY
FX07  LD VX, DT     VX = DT
FX15  LD DT, VX     DT = VX
FX18  LD ST, VX     ST = VX
ANNN  LD I, NNN     I = NNN
FX29  LD F, VX      I = address of 4x5 font character in VX (0..F) *
FX33  LD B, VX      Store BCD representation of VX at I (100), I+1 (10),
                     and I+2 (1); I remains unchanged
FX55  LD [I], VX    Store V0..VX (inclusive) to memory starting at I; 
                     I remains unchanged
FX65  LD VX, [I]    Load V0..VX (inclusive) from memory starting at I; 
                     I remains unchanged
FX1E  ADD I, VX     I = I + VX; VF = 1 if I > 0xFFF else 0
7XNN  ADD VX, NN    VX = VX + NN
8XY4  ADD VX, VY    VX = VX + VY; VF = 1 if carry else 0
8XY5  SUB VX, VY    VX = VX - VY; VF = 1 if not borrow else 0
8XY7  SUBN VX, VY   VX = VY - VX; VF = 1 if not borrow else 0
8XY1  OR VX, VY     VX = VX OR VY
8XY2  AND VX, VY    VX = VX AND VY
8XY3  XOR VX, VY    VX = VX XOR VY
8XY6  SHR VX        VF = LSB(VX); VX = VX >> 1 (** see note)
8XYE  SHL VX        VF = MSB(VX); VX = VX << 1 (** see note)
CXNN  RND VX, NN    VX = RND() AND NN
DXYN  DRW VX, VY, N Draw 8xN sprite at I to VX, VY; VF = 1 
                     if collision else 0

And here are the instructions added for the Super CHIP-8 (a.k.a. CHIP-48):

Op 	  Mnemonic      Description
=================================
00BN  SCU N         Scroll up N pixels (N/2 pixels in lores mode)
00CN  SCD N         Scroll down N pixels (N/2 pixels in lores mode)
00FB  SCR           Scroll right 4 pixels (2 pixels in lores mode)
00FC  SCL           Scroll left 4 pixels (2 pixels in lores mode)
00FD  EXIT          Exit the interpreter
00FE  LOW           Enter lores (64x32) mode; (default mode)
00FF  HIGH          Enter high resolution (128x64) mode
DXY0  DRW VX, VY, 0 Draw a 16x16 sprite at I to VX, VY (8x16 in lores) ***
FX30  LD HF, VX     I = address of 8x10 font character in VX (0..F) *
FX75  LD R, VX      Store V0..VX into HP-RPL flags R0..RX (X < 8)
FX85  LD VX, R 	    Load V0..VX from HP-RPLflags R0..RX (X < 8)

Nothing special needs to be done to use the Super CHIP-8 instructions. 
They are just noted separately for anyone wishing to hack the code, so 
they are aware that they are not part of the original CHIP-8 virtual machine.

(*): This is implementation-dependent. Originally the CDP1802 CHIP-8 
interpreter kept this memory somewhere else, but most emulators (including 
this one) put these sprites in the first 512 bytes of the program.

(**): So, in the original CHIP-8, the shift opcodes were actually intended 
to be VX = VY shift 1. But somewhere along the way this was dropped and 
shortened to just be VX = VX shift 1. No ROMS or emulators I could find 
implemented the original CHIP-8 shift instructions, and so neither does 
this one. However, the assembler will always write out a correct instruction 
so that any future emulators can implement the shift either way and it 
will work.

(***): When implementing 16x16 sprite drawing, note that the sprites are 
drawn row major. The first two bytes make up the first row, the next two 
bytes the second row, etc.
